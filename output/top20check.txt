Loading the data into a dictionary
(set([frozenset(['19', '15']), frozenset(['12', '14']), frozenset(['11', '2']), frozenset(['10', '2']), frozenset(['1', '6']), frozenset(['1', '8']), frozenset(['1', '12']), frozenset(['4', '14']), frozenset(['11', '7']), frozenset(['12', '5']), frozenset(['19', '5']), frozenset(['18', '15']), frozenset(['2', '17']), frozenset(['1', '13']), frozenset(['13', '6']), frozenset(['13', '7']), frozenset(['11', '12']), frozenset(['5', '14']), frozenset(['1', '17']), frozenset(['2', '6']), frozenset(['10', '5']), frozenset(['15', '7']), frozenset(['8', '13']), frozenset(['9', '13']), frozenset(['9', '5']), frozenset(['2', '4']), frozenset(['2', '7']), frozenset(['15', '4']), frozenset(['13', '5']), frozenset(['2', '5']), frozenset(['9', '2']), frozenset(['15', '17']), frozenset(['11', '14']), frozenset(['14', '17']), frozenset(['11', '5']), frozenset(['13', '16']), frozenset(['3', '7']), frozenset(['8', '14']), frozenset(['5', '6']), frozenset(['18', '2']), frozenset(['13', '2']), frozenset(['5', '17']), frozenset(['13', '4']), frozenset(['11', '9']), frozenset(['2', '15']), frozenset(['19', '7']), frozenset(['1', '5']), frozenset(['19', '13']), frozenset(['18', '17']), frozenset(['5', '15']), frozenset(['19', '18']), frozenset(['13', '17']), frozenset(['9', '7']), frozenset(['19', '14']), frozenset(['5', '7']), frozenset(['2', '12']), frozenset(['0', '2']), frozenset(['0', '13']), frozenset(['8', '5']), frozenset(['1', '14']), frozenset(['2', '14']), frozenset(['1', '2']), frozenset(['5', '16']), frozenset(['19', '2']), frozenset(['13', '15']), frozenset(['18', '13']), frozenset(['10', '7']), frozenset(['1', '19']), frozenset(['8', '2']), frozenset(['0', '5']), frozenset(['8', '7']), frozenset(['7', '17']), frozenset(['9', '8']), frozenset(['12', '15']), frozenset(['18', '14']), frozenset(['13', '12']), frozenset(['11', '13']), frozenset(['13', '14']), frozenset(['12', '7']), frozenset(['19', '17']), frozenset(['14', '7']), frozenset(['1', '15']), frozenset(['15', '14']), frozenset(['18', '5']), frozenset(['5', '4'])]), set([frozenset(['1', '13', '2']), frozenset(['0', '2', '5']), frozenset(['2', '12', '5']), frozenset(['2', '5', '14']), frozenset(['2', '5', '17']), frozenset(['5', '13', '15']), frozenset(['13', '5', '14']), frozenset(['1', '2', '6']), frozenset(['13', '2', '5']), frozenset(['1', '13', '5']), frozenset(['2', '5', '7']), frozenset(['1', '2', '5']), frozenset(['15', '2', '5']), frozenset(['2', '5', '6']), frozenset(['8', '2', '5']), frozenset(['19', '2', '5']), frozenset(['1', '5', '6'])]), set([frozenset(['1', '13', '2', '5'])]))
([[19, 15], [12, 14], [11, 2], [10, 2], [1, 6], [1, 8], [1, 12], [4, 14], [11, 7], [12, 5], [19, 5], [18, 15], [2, 17], [1, 13], [13, 6], [13, 7], [11, 12], [5, 14], [1, 17], [2, 6], [10, 5], [15, 7], [8, 13], [9, 13], [9, 5], [2, 4], [2, 7], [15, 4], [13, 5], [2, 5], [9, 2], [15, 17], [11, 14], [14, 17], [11, 5], [13, 16], [3, 7], [8, 14], [5, 6], [18, 2], [13, 2], [5, 17], [13, 4], [11, 9], [2, 15], [19, 7], [1, 5], [19, 13], [18, 17], [5, 15], [19, 18], [13, 17], [9, 7], [19, 14], [5, 7], [2, 12], [0, 2], [0, 13], [8, 5], [1, 14], [2, 14], [1, 2], [5, 16], [19, 2], [13, 15], [18, 13], [10, 7], [1, 19], [8, 2], [0, 5], [8, 7], [7, 17], [9, 8], [12, 15], [18, 14], [13, 12], [11, 13], [13, 14], [12, 7], [19, 17], [14, 7], [1, 15], [15, 14], [18, 5], [5, 4]], [[1, 13, 2], [0, 2, 5], [2, 12, 5], [2, 5, 14], [2, 5, 17], [5, 13, 15], [13, 5, 14], [1, 2, 6], [13, 2, 5], [1, 13, 5], [2, 5, 7], [1, 2, 5], [15, 2, 5], [2, 5, 6], [8, 2, 5], [19, 2, 5], [1, 5, 6]], [[1, 13, 2, 5]])
Creating the feature graph
('Added edge for:', (2, 12))
('Added edge for:', (14, 17))
('Added edge for:', (18, 14))
('Added edge for:', (8, 13))
('Added edge for:', (18, 15))
('Added edge for:', (14, 7))
('Added edge for:', (11, 2))
('Added edge for:', (1, 17))
('Added edge for:', (1, 15))
('Added edge for:', (12, 5))
('Added edge for:', (19, 15))
('Added edge for:', (13, 12))
('Added edge for:', (1, 6))
('Added edge for:', (19, 14))
('Added edge for:', (11, 14))
('Added edge for:', (RUNNING THE L-BFGS-B CODE

           * * *

Machine precision = 2.220D-16
 N =          123     M =           10

At X0         0 variables are exactly at the bounds

At iterate    0    f=  3.77417D+06    |proj g|=  6.08767D+04

At iterate    1    f=  1.00275D+06    |proj g|=  5.10119D+04

At iterate    2    f=  4.82367D+05    |proj g|=  2.01973D+04

At iterate    3    f=  4.01921D+05    |proj g|=  1.36214D+04

At iterate    4    f=  2.90947D+05    |proj g|=  5.23100D+03

At iterate    5    f=  2.63770D+05    |proj g|=  2.39359D+03

At iterate    6    f=  2.52285D+05    |proj g|=  1.50605D+03

At iterate    7    f=  2.47049D+05    |proj g|=  8.75792D+02

At iterate    8    f=  2.45535D+05    |proj g|=  2.17461D+03

At iterate    9    f=  2.43480D+05    |proj g|=  1.65157D+03

At iterate   10    f=  2.40473D+05    |proj g|=  1.37797D+03

At iterate   11    f=  2.38234D+05    |proj g|=  1.16549D+03

At iterate   12    f=  2.36421D+05    |proj g|=  9.14905D+02

At iterate   13    f=  2.34982D+05    |proj g|=  1.07969D+03

At iterate   14    f=  2.34331D+05    |proj g|=  2.12305D+03

At iterate   15    f=  2.33448D+05    |proj g|=  6.06335D+02

At iterate   16    f=  2.33123D+05    |proj g|=  5.26928D+02

At iterate   17    f=  2.32444D+05    |proj g|=  3.62840D+02

At iterate   18    f=  2.32169D+05    |proj g|=  2.25130D+02

At iterate   19    f=  2.31931D+05    |proj g|=  2.20316D+02

At iterate   20    f=  2.31842D+05    |proj g|=  4.21016D+02

At iterate   21    f=  2.31768D+05    |proj g|=  2.29091D+02

At iterate   22    f=  2.31732D+05    |proj g|=  8.05914D+01

At iterate   23    f=  2.31703D+05    |proj g|=  1.80289D+02

At iterate   24    f=  2.31660D+05    |proj g|=  2.76696D+02

At iterate   25    f=  2.31633D+05    |proj g|=  2.21407D+02

At iterate   26    f=  2.31615D+05    |proj g|=  6.36152D+01

At iterate   27    f=  2.31604D+05    |proj g|=  7.09057D+01

At iterate   28    f=  2.31591D+05    |proj g|=  8.37113D+01

At iterate   29    f=  2.31569D+05    |proj g|=  8.63336D+01

At iterate   30    f=  2.31556D+05    |proj g|=  1.61389D+02

At iterate   31    f=  2.31539D+05    |proj g|=  7.54226D+01

At iterate   32    f=  2.31525D+05    |proj g|=  5.45377D+01

At iterate   33    f=  2.31514D+05    |proj g|=  4.72646D+01

At iterate   34    f=  2.31509D+05    |proj g|=  1.57859D+02

At iterate   35    f=  2.31500D+05    |proj g|=  3.66272D+01

At iterate   36    f=  2.31497D+05    |proj g|=  2.75031D+01

At iterate   37    f=  2.31494D+05    |proj g|=  1.14369D+02

At iterate   38    f=  2.31490D+05    |proj g|=  3.81755D+01

At iterate   39    f=  2.31488D+05    |proj g|=  3.46336D+01

At iterate   40    f=  2.31484D+05    |proj g|=  2.67115D+01

At iterate   41    f=  2.31480D+05    |proj g|=  2.76399D+01

At iterate   42    f=  2.31478D+05    |proj g|=  5.63683D+01

At iterate   43    f=  2.31477D+05    |proj g|=  1.34954D+01

At iterate   44    f=  2.31476D+05    |proj g|=  1.66357D+01

At iterate   45    f=  2.31475D+05    |proj g|=  2.12312D+01

At iterate   46    f=  2.31474D+05    |proj g|=  3.77302D+01

At iterate   47    f=  2.31473D+05    |proj g|=  9.71195D+00

At iterate   48    f=  2.31472D+05    |proj g|=  1.01747D+01

At iterate   49    f=  2.31472D+05    |proj g|=  4.71133D+01

At iterate   50    f=  2.31471D+05    |proj g|=  1.52126D+01

At iterate   51    f=  2.31471D+05    |proj g|=  8.64966D+00

At iterate   52    f=  2.31471D+05    |proj g|=  7.94244D+00

At iterate   53    f=  2.31470D+05    |proj g|=  1.02475D+01

At iterate   54    f=  2.31470D+05    |proj g|=  9.08331D+00

At iterate   55    f=  2.31469D+05    |proj g|=  1.67871D+01

At iterate   56    f=  2.31469D+05    |proj g|=  1.33179D+01

At iterate   57    f=  2.31469D+05    |proj g|=  8.46921D+00

At iterate   58    f=  2.31468D+05    |proj g|=  1.25874D+01

At iterate   59    f=  2.31468D+05    |proj g|=  5.30272D+00

At iterate   60    f=  2.31468D+05    |proj g|=  6.35337D+00

At iterate   61    f=  2.31468D+05    |proj g|=  5.56902D+01

At iterate   62    f=  2.31467D+05    |proj g|=  7.68923D+00

At iterate   63    f=  2.31467D+05    |proj g|=  5.35510D+00

At iterate   64    f=  2.31467D+05    |proj g|=  7.09551D+00

At iterate   65    f=  2.31467D+05    |proj g|=  6.76955D+00

At iterate   66    f=  2.31467D+05    |proj g|=  4.00469D+00

At iterate   67    f=  2.31467D+05    |proj g|=  1.97557D+01

At iterate   68    f=  2.31467D+05    |proj g|=  6.05942D+00

At iterate   69    f=  2.31467D+05    |proj g|=  2.64845D+00

At iterate   70    f=  2.31467D+05    |proj g|=  2.56114D+00

At iterate   71    f=  2.31467D+05    |proj g|=  5.73636D+00

At iterate   72    f=  2.31467D+05    |proj g|=  5.30854D+00

At iterate   73    f=  2.31466D+05    |proj g|=  3.37022D+00

At iterate   74    f=  2.31466D+05    |proj g|=  1.28028D+01

At iterate   75    f=  2.31466D+05    |proj g|=  3.62634D+00

At iterate   76    f=  2.31466D+05    |proj g|=  2.77068D+00

At iterate   77    f=  2.31466D+05    |proj g|=  5.15429D+00

At iterate   78    f=  2.31466D+05    |proj g|=  4.11819D+00

At iterate   79    f=  2.31466D+05    |proj g|=  3.70783D+00

At iterate   80    f=  2.31466D+05    |proj g|=  3.54194D+00

At iterate   81    f=  2.31466D+05    |proj g|=  2.29629D+00

At iterate   82    f=  2.31466D+05    |proj g|=  1.24855D+00

At iterate   83    f=  2.31466D+05    |proj g|=  3.01516D+00

At iterate   84    f=  2.31466D+05    |proj g|=  1.16415D+00

At iterate   85    f=  2.31466D+05    |proj g|=  9.16771D-01

At iterate   86    f=  2.31466D+05    |proj g|=  8.52742D-01

At iterate   87    f=  2.31466D+05    |proj g|=  3.82715D+00

           * * *

Tit   = total number of iterations
Tnf   = total number of function evaluations
Tnint = total number of segments explored during Cauchy searches
Skip  = number of BFGS updates skipped
Nact  = number of active bounds at final generalized Cauchy point
Projg = norm of the final projected gradient
F     = final function value

           * * *

   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F
  123     87     91      1     0     0   3.827D+00   2.315D+05
  F =   231466.313004361     

CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH             

 Cauchy                time 0.000E+00 seconds.
 Subspace minimization time 0.000E+00 seconds.
 Line search           time 0.000E+00 seconds.

 Total User time 0.000E+00 seconds.

3, 7))
('Added edge for:', (2, 5))
('Added edge for:', (8, 5))
('Added edge for:', (15, 14))
('Added edge for:', (12, 15))
('Added edge for:', (1, 5))
('Added edge for:', (1, 2))
('Added edge for:', (8, 14))
('Added edge for:', (19, 18))
('Added edge for:', (19, 17))
('Added edge for:', (11, 5))
('Added edge for:', (10, 7))
('Added edge for:', (19, 7))
('Added edge for:', (18, 5))
('Added edge for:', (18, 2))
('Added edge for:', (1, 14))
('Added edge for:', (13, 16))
('Added edge for:', (5, 6))
('Added edge for:', (13, 7))
('Added edge for:', (5, 17))
('Added edge for:', (15, 4))
('Added edge for:', (13, 4))
('Added edge for:', (9, 7))
('Added edge for:', (18, 13))
('Added edge for:', (2, 6))
('Added edge for:', (13, 2))
('Added edge for:', (12, 14))
('Added edge for:', (13, 15))
('Added edge for:', (9, 13))
('Added edge for:', (1, 13))
('Added edge for:', (12, 7))
('Added edge for:', (11, 9))
('Added edge for:', (4, 14))
('Added edge for:', (18, 17))
('Added edge for:', (13, 6))
('Added edge for:', (19, 2))
('Added edge for:', (5, 15))
('Added edge for:', (0, 5))
('Added edge for:', (15, 7))
('Added edge for:', (8, 7))
('Added edge for:', (19, 13))
('Added edge for:', (5, 4))
('Added edge for:', (9, 8))
('Added edge for:', (2, 14))
('Added edge for:', (11, 12))
('Added edge for:', (2, 17))
('Added edge for:', (15, 17))
('Added edge for:', (2, 7))
('Added edge for:', (11, 7))
('Added edge for:', (10, 5))
('Added edge for:', (0, 2))
('Added edge for:', (5, 16))
('Added edge for:', (1, 12))
('Added edge for:', (13, 17))
('Added edge for:', (9, 2))
('Added edge for:', (5, 7))
('Added edge for:', (0, 13))
('Added edge for:', (13, 5))
('Added edge for:', (8, 2))
('Added edge for:', (19, 5))
('Added edge for:', (5, 14))
('Added edge for:', (13, 14))
('Added edge for:', (1, 8))
('Added edge for:', (1, 19))
('Added edge for:', (7, 17))
('Added edge for:', (2, 15))
('Added edge for:', (9, 5))
('Added edge for:', (11, 13))
('Added edge for:', (2, 4))
('Added edge for:', (10, 2))
('Added edge for:', (19, 2, 5))
('Added edge for:', (1, 13, 5))
('Added edge for:', (13, 5, 14))
('Added edge for:', (1, 2, 6))
('Added edge for:', (2, 5, 6))
('Added edge for:', (8, 2, 5))
('Added edge for:', (1, 2, 5))
('Added edge for:', (13, 2, 5))
('Added edge for:', (1, 13, 2))
('Added edge for:', (2, 12, 5))
('Added edge for:', (0, 2, 5))
('Added edge for:', (15, 2, 5))
('Added edge for:', (1, 5, 6))
('Added edge for:', (5, 13, 15))
('Added edge for:', (2, 5, 7))
('Added edge for:', (2, 5, 14))
('Added edge for:', (2, 5, 17))
('Added edge for:', (19, 2, 5))
('Added edge for:', (1, 13, 5))
('Added edge for:', (13, 5, 14))
('Added edge for:', (1, 2, 6))
('Added edge for:', (2, 5, 6))
('Added edge for:', (8, 2, 5))
('Added edge for:', (1, 2, 5))
('Added edge for:', (13, 2, 5))
('Added edge for:', (1, 13, 2))
('Added edge for:', (2, 12, 5))
('Added edge for:', (0, 2, 5))
('Added edge for:', (15, 2, 5))
('Added edge for:', (1, 5, 6))
('Added edge for:', (5, 13, 15))
('Added edge for:', (2, 5, 7))
('Added edge for:', (2, 5, 14))
('Added edge for:', (2, 5, 17))
Partioning the feature graph
Finding the connected components
[[0, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3]]
('thetas', (array([-3.91886197, -3.85753199, -3.49394206, -4.02933703, -3.04071082,
       -4.54302061, -2.33172287, -3.83146157, -3.8062041 , -3.61257783,
       -3.25725529, -3.08722785, -3.14601607, -3.0375467 , -3.49172885,
       -3.53260106, -3.82307535, -3.79216713, -3.63781475, -3.53395081,
        0.17488332,  0.62118989,  0.52790292,  0.35494085,  0.38859146,
       -0.01641228,  0.17099365,  0.25467649,  0.17312489,  0.20766922,
        0.28913208,  0.25749267,  1.73224615,  0.47904605,  0.17290915,
        1.21633184,  3.27428106,  0.83259159,  0.8306965 ,  0.57779174,
        1.82607338,  1.89274082,  0.37733569,  2.7823125 ,  0.97491804,
       -0.27187   ,  0.93527894, -0.02960596,  0.10013625,  0.08073841,
       -0.03510351,  0.57114458,  1.83526814, -0.0920137 ,  0.81673972,
        0.97837045,  0.64013062,  0.3597139 ,  0.25080229,  1.56975414,
        0.85919598,  0.3756015 ,  1.25641636,  0.2418486 ,  0.74664022,
        0.31388293,  1.55540289,  0.94987331,  0.77728449,  0.27002273,
        0.47958914,  0.65565134,  0.95522182,  0.17199702,  0.59016926,
        0.369252  ,  0.4022852 ,  1.72275209,  0.41916759,  0.50169249,
        0.67838223,  0.68371877, -0.51294602,  0.6993447 ,  0.15093147,
        1.65199084,  0.11961104, -0.0522095 ,  0.53058537,  0.19809021,
       -0.62604452,  0.3001691 ,  1.21398775,  0.67052355,  0.4858808 ,
        0.54317847,  1.18420262,  0.07749816,  0.04136687,  0.16432595,
        0.56879292,  0.36626015,  0.24576994,  0.37412615,  0.33208971,
       -0.52954725, -0.65781829, -0.71356076, -0.84355132, -0.62316427,
       -0.59471238, -0.71946749, -0.62423916, -0.78439788, -0.02988223,
       -1.14887082, -0.67704662, -0.93532547, -0.66023909,  0.47820168,
       -0.53952534, -0.587004  ,  0.69631311]), 231466.31300436053, {'warnflag': 0, 'task': 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH', 'grad': array([ 0.19208528,  2.96276994,  1.28347892, -0.08440111,  3.82715371,
        0.71304385, -1.13504939,  0.12223609,  0.04947651, -0.12514647,
       -0.28812792, -0.36670826,  0.98079909,  0.6344635 ,  0.48603397,
       -0.20954758,  0.71304385,  0.45110937,  0.73050614, -0.35215635,
        0.39290171,  0.15133992,  0.04947651,  0.12805685, -0.00873115,
        0.07566996,  0.20954758,  0.11059456,  0.13387762,  0.57334546,
        0.10477379,  0.15716068,  0.27066562,  0.11641532,  0.13387762,
       -0.17462298,  2.80560926,  0.37543941,  0.18626451,  0.04656613,
        1.30094122,  1.15251169,  0.12805685,  0.34924597,  0.09895302,
        0.25029294, -0.16298145,  0.09895302,  0.12805685,  0.00582077,
        0.05238689,  0.05820766,  0.55879354, -0.04365575,  0.36379788,
        0.0349246 ,  0.03201421,  0.02328306,  0.1193257 ,  0.36670826,
        1.02445483,  0.10186341,  0.24156179,  0.27939677,  0.71013346,
       -0.17753337,  0.02328306,  0.01455192,  0.07566996,  0.11641532,
        0.25902409,  0.47148205,  0.09895302,  0.08731149, -0.04074536,
        0.18044375,  0.27939677,  0.02910383,  0.36670826, -0.23574103,
        0.3085006 ,  0.13969839,  0.1717126 , -0.15133992,  0.20372681,
        0.19790605,  0.136788  ,  0.16880222,  0.23865141,  0.25611371,
        0.42200554, -0.01455192,  0.96042641,  0.17753337,  0.1717126 ,
        0.41327439,  0.0349246 ,  0.14260877,  0.02910383,  0.00582077,
        0.49476512,  0.27066562,  0.18044375,  0.04656613,  0.02910383,
        0.12805685,  0.42491592,  0.25611371,  0.06984919,  0.82654878,
        0.22992026,  0.97497832,  1.25146471,  0.48312359,  0.52968971,
        0.50349627,  0.33469405,  0.23574103,  0.13969839,  0.1891749 ,
        0.18626451,  0.25902409,  0.23574103]), 'nit': 87, 'funcalls': 11284}))
('Partition num, Total prob: ', 0, 1.0000000000000007)
